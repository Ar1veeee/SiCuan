// prisma/schema.prisma
generator client {
  provider = "mysql"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int      @id @default(autoincrement())
  name       String   @db.VarChar(100)
  email      String   @unique @db.VarChar(100)
  password   String   @db.VarChar(255)
  nama_usaha String   @db.VarChar(255)
  createdAt  DateTime @default(now())
  Auth       Auth?
  passwordResets  PasswordReset[]
  menus Menu[]
  stockTransactions StockTransaction[] // Keep this for tracking who made stock changes
}

model Auth {
  id           Int      @id @default(autoincrement())
  userId       Int      @unique
  accessToken  String?  @unique @db.VarChar(255)
  refreshToken String?  @unique @db.VarChar(255)
  deviceInfo   String?  @db.VarChar(255)
  createdAt    DateTime @default(now())
  expiresAt    DateTime?
  isActive     Boolean  @default(true)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Menu {
  id         Int     @id @default(autoincrement())
  userId     Int     
  nama_menu  String
  jumlah_hpp Int?

  user       User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  bahanList   MenuBahan[]
}

// Simplified Bahan (Stock) model
model Bahan {
  id          Int           @id @default(autoincrement())
  nama        String        @unique  // Adding unique constraint to prevent duplicates
  jumlah      Float         // jumlah stok tersedia
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  
  // Keep relations
  menuBahan   MenuBahan[]
}

model MenuBahan {
  id          Int      @id @default(autoincrement())
  menuId      Int
  bahanId     Int
  jumlah      Int?     // jumlah bahan yang digunakan dalam menu
  harga_beli  Float?   // Moving pricing info to the relationship since it's not in Bahan anymore
  satuan      String?  // Moving unit info to the relationship since it's not in Bahan anymore
  biaya       Float?   // Storing calculated cost in the relationship
  
  // Relasi
  menu        Menu     @relation(fields: [menuId], references: [id], onDelete: Cascade)
  bahan       Bahan    @relation(fields: [bahanId], references: [id], onDelete: Restrict)

  @@unique([menuId, bahanId])
}

// Simplified StockTransaction model
model StockTransaction {
  id              Int       @id @default(autoincrement())
  userId          Int       // User who made the transaction (keeping for audit purposes)
  nama            String       // Ingredient reference
  jumlah          Float     // Amount changed (positive or negative)
  jenis_transaksi String    // 'masuk', 'keluar', 'penyesuaian'
  keterangan      String?   @db.Text
  tanggal         DateTime  @default(now())
  
  // Relations
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PasswordReset {
  id        Int      @id @default(autoincrement())
  userId    Int
  otp       String   @db.VarChar(10)
  used      Boolean  @default(false)
  expiresAt DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}