// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                String   @id @db.Char(26)
  name              String   @db.VarChar(100)
  email             String   @unique @db.VarChar(100)
  password          String   @db.VarChar(255)
  nama_usaha        String   @db.VarChar(255)
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  Auth              Auth?
  passwordResets    PasswordReset[]
  menus             Menu[]
  bahan             Bahan[]
  stockTransactions StockTransaction[]
  sales             Sales[]

  @@index([email])
  @@index([isActive])
}

model Auth {
  id           String       @id @db.Char(26)
  userId       String       @unique
  accessToken  String?      @unique @db.VarChar(255)
  refreshToken String?      @unique @db.VarChar(255)
  deviceInfo   String?      @db.VarChar(255)
  createdAt    DateTime     @default(now())
  expiresAt    DateTime
  isActive     Boolean      @default(true)
  
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expiresAt, isActive])
}

model Menu {
  id          String        @id @db.Char(26)
  userId      String
  nama_menu   String
  hpp         Float?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  bahanList   MenuBahan[]
  sales       Sales[]

  @@unique([userId, nama_menu])
}

model Bahan {
  id                String                @id @db.Char(26)
  userId            String
  nama_bahan        String
  jumlah            Float                 @default(0)
  harga_beli        Float?        
  satuan            String?               // "kg", "pcs"
  minimum_stock     Float?                @default(0)
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt
  
  user              User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  menuBahan         MenuBahan[]
  stockTransactions StockTransaction[]

  @@unique([userId, nama_bahan])
  @@index([userId, jumlah])
}

model MenuBahan {
  id          String     @id @db.Char(26)
  menuId      String
  bahanId     String
  jumlah      Int?       // jumlah bahan yang digunakan dalam menu
  biaya       Float?     // biaya per bahan
  
  menu        Menu       @relation(fields: [menuId], references: [id], onDelete: Cascade)
  bahan       Bahan      @relation(fields: [bahanId], references: [id], onDelete: Restrict)

  @@unique([menuId, bahanId])
  @@index([menuId])
  @@index([bahanId])
}

model StockTransaction {
  id              String    @id @db.Char(26)
  userId          String
  bahanId         String
  jumlah          Float
  jenis_transaksi String    // 'masuk', 'keluar', 'penyesuaian'
  keterangan      String?   @db.Text
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  bahan           Bahan    @relation(fields: [bahanId], references: [id], onDelete: Restrict)

  @@index([userId, bahanId, createdAt])
  @@index([jenis_transaksi, createdAt])
}

model PasswordReset {
  id        String    @id @db.Char(26)
  userId    String
  otp       String    @db.VarChar(10)
  used      Boolean   @default(false)
  expiresAt DateTime
  createdAt DateTime  @default(now())

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([otp, used, expiresAt])
}

model Sales {
  id          String    @id @db.Char(26)
  userId      String
  menuId      String
  tanggal     DateTime  @default(now())
  harga_jual  Float     // Harga jual menu
  jumlah_laku Int       // Quantity terjual
  hpp_satuan  Float?
  income      Float?    // harga_jual * jumlah_laku
  profit      Float?    // (harga_jual - hpp) * jumlah_laku (bisa dihitung otomatis)
  keterangan  String?   @db.Text
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  menu        Menu      @relation(fields: [menuId], references: [id], onDelete: Restrict)
  
  @@index([userId, menuId, tanggal])
}